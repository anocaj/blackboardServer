package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/blackboard") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private BlackboardRepository blackboardRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewBlackboard (@RequestParam String name
			, @RequestParam String message) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Blackboard n = new Blackboard();
		n.setName(name);
		n.setMessage(message);
		blackboardRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Blackboard> getAllBlackboards() {
		// This returns a JSON or XML with the Blackboards
		return blackboardRepository.findAll();
	}

	@GetMapping(path="/exists_blackboard")
	public @ResponseBody String existsBlackboard (@RequestParam String name){
		// This returns a JSON or XML with the Blackboards

		boolean b = blackboardRepository.existsByName(name);
		String s = "false";
		if (b){
			s = "true";
		} else if (!b){
			s = "false";
		}
		return s;
	}

	@GetMapping(path="/create_blackboard") // Map ONLY GET Requests
	public @ResponseBody String createBlackboard (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		boolean existsBlackboard = blackboardRepository.existsByName(name);
		if (existsBlackboard){
			return "Blackboard " + name + " already exists";
		} else {

			Blackboard n = new Blackboard();
			n.setName(name);
			blackboardRepository.save(n);
			return "Saved Blackboard";
		}
	}

	@GetMapping(path="/display_blackboard") // Map ONLY GET Requests
	public @ResponseBody String displayBlackboard (@RequestParam String name
			, @RequestParam String message) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		boolean existsBlackboard = blackboardRepository.existsByName(name);
		if (existsBlackboard){
			Blackboard n = new Blackboard();
			n.setName(name);
			n.setMessage(message);
			blackboardRepository.save(n);
			return "displayed blackboard";
		} else {

			return "Blackboard " + name + " does not exists";
		}
	}

	@GetMapping(path="/read_blackboard")
	public @ResponseBody String getMessage (@RequestParam String name) {
        //

        boolean existsBlackboard = blackboardRepository.existsByName(name);
        if (existsBlackboard) {
            if (isEmptyBlackboard(name).equals("true")) {
                return "Blackboard " + name + " is empty";
            } else {
                Blackboard b = blackboardRepository.findOneByName(name);
                return b.getMessage();
            }

        } else {
            return "Blackboard " + name + " does not exists";
        }


    }

	@GetMapping(path="/clear_blackboard")
	public @ResponseBody String clearedBlackboard (@RequestParam String name){
		// This returns a JSON or XML with the Blackboards


		Blackboard n = blackboardRepository.findOneByName(name);
		n.setMessage(null);
		blackboardRepository.save(n);
		return "cleared blackboard";
	}



	@GetMapping(path="/delete_blackboard")
	public @ResponseBody String deletedBlackboard (@RequestParam String name){
		// This returns a JSON or XML with the Blackboards

		blackboardRepository.deleteBlackboardByName(name);
		return "deleted blackboard";
	}

	@GetMapping(path="/get_blackboard_status")
	public @ResponseBody String isEmptyBlackboard (@RequestParam String name){
		// This returns a JSON or XML with the Blackboards
		boolean existsBlackboard = blackboardRepository.existsByName(name);
		if (existsBlackboard){
			Blackboard b = blackboardRepository.findOneByName(name);
			if (b.getMessage() == null){
				return "true";
			} else {
				return "false";
			}
		} else {
			return "Blackboard " + name + " does not exists";
		}
	}
}
